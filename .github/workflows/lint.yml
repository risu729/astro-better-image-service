name: Lint

on:
  pull_request:
    branches:
      - main
  workflow_call:
  workflow_dispatch:
  schedule:
    - cron: "0 0 * * SUN"

permissions: {}

defaults:
  run:
    shell: bash

jobs:
  list-tasks:
    name: List Lint Tasks
    runs-on: ubuntu-24.04
    timeout-minutes: 10
    permissions:
      contents: read # for checkout

    outputs:
      tasks: ${{ steps.list.outputs.tasks }}

    steps:
      - name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          persist-credentials: false

      - name: Install mise
        uses: jdx/mise-action@156251fcc627ac4e26cb0f93dd47d1d4979abf24 # v3.3.0
        with:
          version: 2025.10.3
        env:
          GITHUB_TOKEN: ${{ github.token }}

      - name: List mise tasks
        id: list
        run: |
          tasks=$(mise tasks ls --json \
            | jq --raw-output --compact-output \
              'map(select(.name | test("^check:")) | {name: (.name | sub("^.+:" ; "")), task: .name})')
          echo "tasks=${tasks}" >> "${GITHUB_OUTPUT}"

  lint:
    needs: list-tasks

    runs-on: ubuntu-24.04
    timeout-minutes: 10
    permissions:
      contents: read # for checkout

    name: ${{ matrix.name }}
    strategy:
      fail-fast: false
      matrix:
        # use include not to be treated as multi-dimensional matrix
        # ref: https://docs.github.com/en/actions/using-jobs/using-a-matrix-for-your-jobs#expanding-or-adding-matrix-configurations
        include: ${{ fromJson(needs.list-tasks.outputs.tasks) }}

    steps:
      - name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          persist-credentials: false

      - name: Install mise
        uses: jdx/mise-action@156251fcc627ac4e26cb0f93dd47d1d4979abf24 # v3.3.0
        with:
          version: 2025.10.3
        env:
          GITHUB_TOKEN: ${{ github.token }}

      - name: Run ${{ matrix.name }}
        run: mise run "${TASK_NAME}"
        env:
          LINT: true
          GITHUB_TOKEN: ${{ github.token }}
          TASK_NAME: ${{ matrix.task }}

  commitlint:
    name: Run commitlint
    runs-on: ubuntu-24.04
    timeout-minutes: 10
    permissions:
      contents: read # for checkout

    steps:
      - name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          fetch-depth: 0 # fetch all history for commitlint
          persist-credentials: false

      - name: Install mise
        uses: jdx/mise-action@156251fcc627ac4e26cb0f93dd47d1d4979abf24 # v3.3.0
        with:
          version: 2025.10.3
        env:
          GITHUB_TOKEN: ${{ github.token }}

      - name: Install package.json dependencies
        run: mise run buni

      - name: "commitlint (push: initial commit)"
        id: commitlint-push-initial
        # commit hash will be 000... if it doesn't exist
        if: github.event_name == 'push' && github.event.before == '0000000000000000000000000000000000000000'
        run: bun run commitlint --verbose --to "${AFTER_SHA}"
        env:
          AFTER_SHA: ${{ github.event.after }}

      - name: commitlint (push)
        id: commitlint-push
        if: github.event_name == 'push' && steps.commitlint-push-initial.outcome == 'skipped'
        run: bun run commitlint --verbose --from "${BEFORE_SHA}" --to "${AFTER_SHA}"
        env:
          BEFORE_SHA: ${{ github.event.before }}
          AFTER_SHA: ${{ github.event.after }}

      - name: commitlint (pull_request)
        id: commitlint-pr
        if: github.event_name == 'pull_request'
        run: |
          bun run commitlint --verbose --from "${BASE_SHA}" --to "${HEAD_SHA}"
        env:
          BASE_SHA: ${{ github.event.pull_request.base.sha }}
          HEAD_SHA: ${{ github.event.pull_request.head.sha }}

      - name: commitlint (pull request title)
        # continue even if the previous step fails
        # do not use continue-on-error because it will result in a successful job
        if: ${{ !cancelled() && (steps.commitlint-pr.outcome == 'success' || steps.commitlint-pr.outcome == 'failure') }}
        # use intermediate environment variable to avoid injection attacks
        # ref: https://docs.github.com/en/actions/security-guides/security-hardening-for-github-actions#using-an-intermediate-environment-variable
        env:
          PR_TITLE: ${{ github.event.pull_request.title }}
        run: echo "${PR_TITLE}" | bun run commitlint --verbose

      - name: commitlint (last commit)
        if: steps.commitlint-push-initial.outcome == 'skipped' && steps.commitlint-push.outcome == 'skipped' && steps.commitlint-pr.outcome == 'skipped'
        run: bun run commitlint --verbose --from "${SHA}"~1 --to "${SHA}"
        env:
          SHA: ${{ github.sha }}

  actions-timeline:
    name: Generate Actions Timeline
    needs:
      - lint
      - commitlint
    # skip if the workflow is called from another workflow
    if: ${{ !cancelled() && contains(github.workflow_ref, '/lint.yml') }}

    runs-on: ubuntu-24.04
    timeout-minutes: 5
    permissions:
      actions: read

    steps:
      - name: actions-timeline
        # cspell:ignore kesin
        uses: Kesin11/actions-timeline@54d513e0b5ff1158f1cf8321108d666a5a6c1fca # v2.2.5
